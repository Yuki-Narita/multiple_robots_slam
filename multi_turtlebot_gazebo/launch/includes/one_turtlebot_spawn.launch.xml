<launch>

    <arg name="robot_name"/>
    <arg name="init_x"/>
    <arg name="init_y"/>
    <arg name="init_yaw"/>
    <arg name="sensor"/>

    <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find lab_turtlebot_description)/urdf/lab_turtlebot_$(arg sensor).urdf.xacro'" />
    <param name="robot_description" command="$(arg urdf_file)" />
  
    <!-- Gazebo model spawner -->
    <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
            args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model $(arg robot_name) -x $(arg init_x) -y $(arg init_y) -Y $(arg init_yaw)">
    </node>
  
    <!-- Velocity muxer -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
            args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
        <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>

    <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
    <include file="$(find multi_turtlebot_gazebo)/launch/includes/bumper2pc.launch.xml">
        <arg name="robot_name" value="$(arg robot_name)"/>
    </include>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="30.0" />
        <param name="tf_prefix" type="string" value="/$(arg robot_name)"/>
    </node>

    <!-- stereo cameta depth -->
    <node if="$(eval arg('sensor')=='stereo')" pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" ns="camera">
        <remap from="points2" to="points"/>
    </node>

    <!-- stereo cameta disparity -->
    <node if="$(eval arg('sensor')=='stereo')" pkg="multi_turtlebot_gazebo" type="publish_disparity_image" name="publish_disparity_image" ns="camera">
        <remap from="disparity_data" to="disparity"/>
    </node>

    <!-- urg_plus_kinect -->
    <include if="$(eval arg('sensor')=='urg_plus_kinect')" file="$(find laser_merge)/launch/laser_merge.launch">
      <arg name="robot_name" value="$(arg robot_name)"/>
      <arg name="merge_scan_topic" value="scan"/>
      <arg name="kinect_scan_topic" value="kinect_scan"/>
      <arg name="urg_scan_topic" value="urg_scan"/>
    </include>

    <!-- Fake laser -->
    <node unless="$(eval arg('sensor')=='stereo')" pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node unless="$(eval arg('sensor')=='stereo')" pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
            args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/$(arg robot_name)/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>
        <param name="range_max" value="10.0"/>
        <remap from="image" to="/$(arg robot_name)/camera/depth/image_raw"/>
        <remap unless="$(eval arg('sensor')=='urg_plus_kinect')" from="scan" to="/$(arg robot_name)/scan"/>
        <remap if="$(eval arg('sensor')=='urg_plus_kinect')" from="scan" to="/$(arg robot_name)/kinect_scan"/>
    </node>

</launch>